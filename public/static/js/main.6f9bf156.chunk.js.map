{"version":3,"sources":["ColorModeSwitcher.js","reducers/auth.js","contexts/auth.js","apis/authentication.js","apis/axios.js","reducers/user.js","contexts/user.js","components/Common/Navbar.jsx","apis/tweet.action.js","components/Common/TweetForm.js","components/Common/Like.js","components/Common/Tweet.js","components/Dashboard/MainSection.jsx","components/Common/Utils.js","components/Dashboard/Account/Profile.jsx","apis/registrations.js","components/Dashboard/Account/AccountEdit.jsx","components/Dashboard/index.jsx","components/Common/PrivateRoute.jsx","components/Authentication/ResetPassword.jsx","components/Authentication/validations.js","components/Authentication/Login.jsx","components/Authentication/Signup.jsx","components/Home/Hero.jsx","components/Common/PageLoader.jsx","components/Main.jsx","common/logger.js","App.js","reducers/tweet.reducer.js","reducers/index.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","authReducer","state","type","payload","localStorage","setItem","JSON","stringify","auth_token","email","isLoggedIn","authToken","authEmail","Error","AuthStateContext","React","createContext","AuthDispatchContext","token","parse","getItem","initialState","AuthProvider","children","useReducer","dispatch","Provider","value","useAuthState","context","useContext","undefined","useAuthDispatch","baseUrl","authenticationApi","login","axios","post","logout","delete","signup","defaults","baseURL","setAuthHeaders","setLoading","headers","Accept","handleSuccessResponse","response","success","status","data","notice","registerIntercepts","authDispatch","interceptors","use","error","Promise","reject","handleErrorResponse","userReducer","user","UserStateContext","UserDispatchContext","UserProvider","useUserState","useUserDispatch","Links","NavLink","as","Link","px","py","rounded","_hover","textDecoration","bg","to","link","Navbar","contact","first_name","last_name","useDisclosure","isOpen","onOpen","onClose","handleLogout","a","window","location","href","h","alignItems","justifyContent","Close","Hamburger","display","md","spacing","base","map","justifySelf","Button","cursor","name","pb","GET_TWEETS","ADD_TWEET","DELETE_TWEET","TweetForm","useState","body","setBody","useDispatch","handleForm","e","preventDefault","then","res","catch","err","console","log","addTweet","user_id","className","onSubmit","placeholder","onChange","target","Like","tweet","Star","w","like","Delete","tweetId","id","method","url","Tweet","MainSection","tweets","useSelector","tweetReducer","Object","keys","length","trim","index","Profile","setEmail","firstName","setFirstName","lastName","setLastName","useEffect","minH","align","justify","mx","boxShadow","minWidth","p","isReadOnly","registrationsApi","updatePassword","put","AccountEdit","history","loading","toast","useToast","validationSchema","Yup","currentPassword","required","password","confirmPassword","oneOf","handleSubmit","current_password","password_confirmation","push","description","duration","isClosable","initialValues","values","errors","touched","width","field","form","isInvalid","htmlFor","mt","isLoading","Home","exact","path","component","from","PrivateRoute","Component","condition","redirectRoute","pathname","InternalLink","New","setState","setError","maxW","direction","setTimeout","borderWidth","_placeholder","borderColor","disabled","colorScheme","Check","textAlign","validateEmail","test","validatePassword","validateName","Login","userDispatch","handleSubmitExternally","is_admin","enableReinitialize","actions","handleChange","isSubmitting","validate","Signup","passwordConfirmation","CallToActionWithVideo","flex","lineHeight","fontWeight","sm","lg","position","_after","content","height","bottom","left","zIndex","top","overflow","PlayIcon","transform","alt","fit","src","createIcon","displayName","viewBox","d","Blob","fill","xmlns","fillRule","clipRule","PageLoader","right","thickness","Main","either","isNil","isEmpty","require","useDefaults","PasswordReset","Hero","App","fetch","json","theme","combineReducers","action","filter","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","get","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f9bf156.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","const authReducer = (state, { type, payload }) => {\n  switch (type) {\n    case 'LOGIN': {\n      localStorage.setItem('authToken', JSON.stringify(payload.auth_token));\n      localStorage.setItem('authEmail', JSON.stringify(payload.email));\n      return {\n        isLoggedIn: true,\n        authToken: payload.auth_token,\n        authEmail: payload.email,\n      };\n    }\n    case 'LOGOUT': {\n      localStorage.setItem('authToken', JSON.stringify(null));\n      localStorage.setItem('authEmail', JSON.stringify(null));\n      localStorage.setItem('currentUser', JSON.stringify(null));\n      return { isLoggedIn: false, authToken: null, authEmail: null };\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${type}`);\n    }\n  }\n};\n\nexport default authReducer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport authReducer from '../reducers/auth';\n\nconst AuthStateContext = React.createContext();\nconst AuthDispatchContext = React.createContext();\n\nconst token = JSON.parse(localStorage.getItem('authToken'));\nconst email = JSON.parse(localStorage.getItem('authEmail'));\nconst initialState = {\n  isLoggedIn: !!token,\n  authToken: token ? token : null,\n  authEmail: email ? email : null,\n};\n\nconst AuthProvider = ({ children }) => {\n  const [state, dispatch] = React.useReducer(authReducer, initialState);\n  return (\n    <AuthStateContext.Provider value={state}>\n      <AuthDispatchContext.Provider value={dispatch}>\n        {children}\n      </AuthDispatchContext.Provider>\n    </AuthStateContext.Provider>\n  );\n};\n\nconst useAuthState = () => {\n  const context = React.useContext(AuthStateContext);\n  if (context === undefined) {\n    throw new Error('useAuthState must be used within a AuthProvider');\n  }\n  return context;\n};\n\nconst useAuthDispatch = () => {\n  const context = React.useContext(AuthDispatchContext);\n  if (context === undefined) {\n    throw new Error('useAuthDispatch must be used within a AuthProvider');\n  }\n  return context;\n};\n\nconst useAuth = () => {\n  return [useAuthState(), useAuthDispatch()];\n};\n\nAuthProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nexport { AuthProvider, useAuthState, useAuthDispatch, useAuth };\n","import axios from 'axios';\n\n// const baseUrl = 'http://localhost:3001/';\nconst baseUrl = 'https://re-testing-heroku-yeah.herokuapp.com/';\n\nconst login = payload => axios.post(`${baseUrl}api/v1/login`, payload);\n\nconst logout = () => axios.delete(`${baseUrl}api/v1/logout`);\n\nconst signup = payload => axios.post(`${baseUrl}api/v1/users`, payload);\n\nconst authenticationApi = {\n  login,\n  logout,\n  signup,\n};\n\nexport default authenticationApi;\n","import axios from 'axios';\n// import { Toastr } from \"neetoui\";\n\naxios.defaults.baseURL = '/';\n\nexport const setAuthHeaders = (setLoading = () => null) => {\n  axios.defaults.headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  };\n  const token = JSON.parse(localStorage.getItem('authToken'));\n  const email = JSON.parse(localStorage.getItem('authEmail'));\n  if (token && email) {\n    axios.defaults.headers['X-Auth-Email'] = email;\n    axios.defaults.headers['X-Auth-Token'] = token;\n  }\n  setLoading(false);\n};\n\nexport const resetAuthTokens = () => {\n  delete axios.defaults.headers['X-Auth-Email'];\n  delete axios.defaults.headers['X-Auth-Token'];\n};\n\nconst handleSuccessResponse = response => {\n  if (response) {\n    response.success = response.status === 200;\n    if (response.data.notice) {\n      // Toastr.success(response.data.notice);\n    }\n  }\n  return response;\n};\n\nconst handleErrorResponse = (error, authDispatch) => {\n  if (error.response?.status === 401) {\n    authDispatch({ type: 'LOGOUT' });\n    // Toastr.error(error.response?.data?.error);\n  } else {\n    // Toastr.error(error.response?.data?.error || error.message);\n  }\n  return Promise.reject(error);\n};\n\nexport const registerIntercepts = authDispatch => {\n  axios.interceptors.response.use(handleSuccessResponse, error =>\n    handleErrorResponse(error, authDispatch)\n  );\n};\n","const userReducer = (state, { type, payload }) => {\n  switch (type) {\n    case 'SET_USER': {\n      localStorage.setItem('currentUser', JSON.stringify(payload.user));\n      return {\n        user: payload.user,\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${type}`);\n    }\n  }\n};\n\nexport default userReducer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport userReducer from '../reducers/user';\n\nconst UserStateContext = React.createContext();\nconst UserDispatchContext = React.createContext();\n\nconst user = JSON.parse(localStorage.getItem('currentUser'));\nconst initialState = { user: user ? user : null };\n\nconst UserProvider = ({ children }) => {\n  const [state, dispatch] = React.useReducer(userReducer, initialState);\n  return (\n    <UserStateContext.Provider value={state}>\n      <UserDispatchContext.Provider value={dispatch}>\n        {children}\n      </UserDispatchContext.Provider>\n    </UserStateContext.Provider>\n  );\n};\n\nconst useUserState = () => {\n  const context = React.useContext(UserStateContext);\n  if (context === undefined) {\n    throw new Error('useUserState must be used within a UserProvider');\n  }\n  return context;\n};\n\nconst useUserDispatch = () => {\n  const context = React.useContext(UserDispatchContext);\n  if (context === undefined) {\n    throw new Error('useUserDispatch must be used within a UserProvider');\n  }\n  return context;\n};\n\nconst useUser = () => {\n  return [useUserState(), useUserDispatch()];\n};\n\nUserProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nexport { UserProvider, useUserState, useUserDispatch, useUser };\n","import { ReactNode } from 'react';\nimport {\n  Box,\n  Flex,\n  Avatar,\n  HStack,\n  Link as ChakraLink,\n  IconButton,\n  Button,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  MenuDivider,\n  useDisclosure,\n  useColorModeValue,\n  Stack,\n} from '@chakra-ui/react';\nimport { HamburgerIcon, CloseIcon } from '@chakra-ui/icons';\nimport { useAuthDispatch } from '../../contexts/auth';\nimport authenticationApi from '../../apis/authentication';\nimport { resetAuthTokens } from '../../apis/axios';\nimport { useUserState } from '../../contexts/user';\nimport { Link } from 'react-router-dom';\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\n\nconst Links = ['Accueil', 'Profile'];\n\nconst NavLink = props => (\n  <ChakraLink\n    as={Link}\n    px={2}\n    py={1}\n    rounded={'md'}\n    _hover={{\n      textDecoration: 'none',\n      bg: useColorModeValue('gray.200', 'gray.700'),\n    }}\n    to={`/${props.link}`}\n  >\n    {props.link}\n\n  </ChakraLink>\n\n);\n\nconst Navbar = () => {\n  const { user } = useUserState();\n  const contact = user ? `${user.first_name} ${user.last_name}` : 'user';\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const authDispatch = useAuthDispatch();\n  const handleLogout = async () => {\n    try {\n      await authenticationApi.logout();\n      authDispatch({ type: 'LOGOUT' });\n      resetAuthTokens();\n      window.location.href = '/';\n    } catch (error) {\n      //   Toastr.error(error);\n    }\n  };\n\n  return (\n    <>\n      <Box bg={useColorModeValue('gray.100', 'gray.900')} px={4}>\n        <Flex h={16} alignItems={'center'} justifyContent={'space-between'}>\n          <IconButton\n            size={'md'}\n            icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}\n            aria-label={'Open Menu'}\n            display={{ md: !isOpen ? 'none' : 'inherit' }}\n            onClick={isOpen ? onClose : onOpen}\n          />\n          <HStack spacing={8} alignItems={'center'}>\n            <HStack\n              as={'nav'}\n              spacing={4}\n              display={{ base: 'none', md: 'flex' }}\n            >\n              {Links.map(link => (\n                <NavLink key={link} link={link} />\n              ))}\n            </HStack>\n          </HStack>\n          <Flex alignItems={'center'}>\n            <Menu>\n              <ColorModeSwitcher justifySelf=\"flex-end\" />\n              <MenuButton\n                as={Button}\n                size={'sm'}\n                rounded={'full'}\n                variant={'link'}\n                cursor={'pointer'}\n                _hover={{ textDecoration: 'none' }}\n              >\n                <Avatar size={'sm'} name={contact} />\n              </MenuButton >\n              <MenuList fontSize={17} >\n                <MenuItem as={Link} to=\"/profile\">\n                  My profile\n                </MenuItem>\n                <MenuItem as={Link} to=\"/account/edit\">\n                  Change password\n                </MenuItem>\n                <MenuItem onClick={handleLogout}>Logout</MenuItem>\n              </MenuList>\n            </Menu>\n          </Flex>\n        </Flex>\n\n        {isOpen ? (\n          <Box pb={4}>\n            <Stack as={'nav'} spacing={4}>\n              {Links.map(link => (\n                <NavLink key={link} link={link} />\n              ))}\n            </Stack>\n          </Box>\n        ) : null}\n      </Box>\n    </>\n  );\n};\n\nexport default Navbar;\n","import axios from \"axios\";\n\nexport const GET_TWEETS = \"GET_TWEETS\";\nexport const ADD_TWEET = \"ADD_TWEET\";\nexport const DELETE_TWEET = 'DELETE_TWEET';\n\nexport const getTweets = () => {\n  return (dispatch) => {\n    return axios\n      .get('api/v1/post_tweets')\n      .then(res => {\n        dispatch({ type: GET_TWEETS, payload: res.data});\n      })\n      .catch(err => console.log(err));\n  };\n};\n\nexport const addTweet = (data) => {\n  return (dispatch) => {\n    return axios\n      .post('api/v1/post_tweets', data)\n      .then(res => {\n        dispatch({ type: ADD_TWEET, payload: res.data });\n      })\n      .catch(err => console.log(err));\n  };\n};\n\nexport const deleteTweet = tweetId => {\n\treturn dispatch => {\n\t\treturn axios({\n      method: 'delete',\n      url: `api/v1/post_tweets/${tweetId}`,\n    })\n      .then(() => {\n        dispatch({ type: DELETE_TWEET, payload: { tweetId } });\n      })\n      .catch(err => console.log(err));\n\t};\n};\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addTweet } from \"../../apis/tweet.action\";\n\nconst TweetForm = () => {\n  const [body, setBody] = useState('');\n  const dispatch = useDispatch();\n\n  const handleForm = (e) => {\n  e.preventDefault();\n\n  if (body) {\n    const data = {\n      body,\n      user_id: 'f617d1e8-ab54-4093-8eb6-43a790672c28',\n    };\n\n    dispatch(addTweet(data));\n    setBody('');\n  }\n};\n\n  return (\n    <div className=\"form-container\">\n      <form onSubmit={e => handleForm(e)}>\n        <h1>Accueil</h1>\n        <textarea\n          placeholder=\"Quoi de neuf ?\"\n          value={body}\n          onChange={e => setBody(e.target.value)}\n        ></textarea>\n        <input type=\"submit\" value=\"Tweeter\" className=\"submit\" />\n      </form>\n    </div>\n  );\n};\n\nexport default TweetForm;\n","import { DeleteIcon, StarIcon } from \"@chakra-ui/icons\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteTweet } from \"../../apis/tweet.action\";\n\nconst Like = ({ tweet }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <div className=\"icon\">\n        <StarIcon w={4} h={4} />\n        <span>{tweet.like}</span>\n      </div>\n\n      <div className=\"icon\">\n        <DeleteIcon\n          w={4}\n          h={4}\n          onClick={() => dispatch(deleteTweet(tweet.id))}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Like;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Like from \"./Like\";\n\nconst Tweet = ({ tweet }) => {\n\n  return (\n    <div className=\"post\">\n      <p>{tweet.body}</p>\n      <Link className=\"link\" to=\"/profile\">@{tweet.user.last_name}</Link>\n\n      <div className=\"author\">\n        <Like tweet={tweet} />\n      </div>\n    </div>\n  );\n};\n\nexport default Tweet;\n","import { useSelector } from 'react-redux';\nimport TweetForm from '../Common/TweetForm';\nimport Tweet from '../Common/Tweet';\nimport { isEmpty } from '../Common/Utils';\nimport { Center } from '@chakra-ui/react'\n\nfunction MainSection() {\n\n\tconst tweets = useSelector(state => state.tweetReducer);\n\n\treturn (\n    <Center>\n        <div className=\"container-home\">\n          <TweetForm />\n          <div className=\"content\">\n            <div className=\"post-container\">\n              {!isEmpty(tweets) &&\n                tweets.map((tweet, index) => <Tweet tweet={tweet} key={index.id} />)}\n            </div>\n          </div>\n        </div>\n    </Center>\n\t);\n}\n\nexport default MainSection;\n","export const isEmpty = (value) => {\n  return (\n    value === undefined ||\n    value === null ||\n    (typeof value === \"object\" && Object.keys(value).length === 0) ||\n    (typeof value === \"string\" && value.trim().length === 0)\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Link as ChakraLink,\n  Button,\n  Heading,\n  useColorModeValue,\n  HStack,\n  FormErrorMessage,\n  useToast,\n} from '@chakra-ui/react';\nimport { useUserState } from '../../../contexts/user';\n\nconst Profile = () => {\n  const { user } = useUserState();\n\n  const [email, setEmail] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  useEffect(() => {\n    if (user) {\n      setEmail(user.email);\n      setFirstName(user.first_name);\n      setLastName(user.last_name);\n    }\n  }, [user]);\n\n  return (\n    <Flex\n      minH={'90vh'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.50', 'gray.800')}\n    >\n      <Stack spacing={5} mx={'auto'}>\n        <Stack align={'center'}>\n          <Heading fontSize={'2xl'}>Profile</Heading>\n        </Stack>\n        <Box\n          rounded={'lg'}\n          bg={useColorModeValue('white', 'gray.700')}\n          boxShadow={'lg'}\n          minWidth={['16em', '25em']}\n          p={8}\n        >\n          <Stack spacing={4}>\n            <FormControl id=\"email\">\n              <FormLabel>Email address</FormLabel>\n              <Input type=\"email\" value={email} isReadOnly />\n            </FormControl>\n            <FormControl id=\"firstName\">\n              <FormLabel>First Name</FormLabel>\n              <Input type=\"text\" value={firstName} isReadOnly />\n            </FormControl>\n            <FormControl id=\"lastName\">\n              <FormLabel>Last Name</FormLabel>\n              <Input type=\"text\" value={lastName} isReadOnly />\n            </FormControl>\n          </Stack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n};\n\nexport default Profile;\n","import axios from 'axios';\n\n// const baseUrl = 'http://localhost:3001/';\nconst baseUrl = 'https://re-testing-heroku-yeah.herokuapp.com/';\n\nconst updatePassword = payload =>\n  axios.put(`${baseUrl}api/v1/password/update`, payload);\n\nconst registrationsApi = {\n  updatePassword,\n};\n\nexport default registrationsApi;\n","import React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport { Formik, Form, Field } from 'formik';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Link as ChakraLink,\n  Button,\n  Heading,\n  useColorModeValue,\n  HStack,\n  FormErrorMessage,\n  useToast,\n} from '@chakra-ui/react';\nimport registrationsApi from '../../../apis/registrations';\nimport { useUserState } from '../../../contexts/user';\n\nconst AccountEdit = ({ history }) => {\n  const { user } = useUserState();\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  const validationSchema = Yup.object({\n    currentPassword: Yup.string().required('Current password is required'),\n    password: Yup.string().required('New password is required'),\n    confirmPassword: Yup.string()\n      .required('Password confirmation is required')\n      .oneOf([Yup.ref('password'), null], 'Passwords must match'),\n  });\n\n  const formikInputAttrs = {\n    type: 'password',\n    'aria-required': 'true',\n    placeholder: '******',\n  };\n\n  const handleSubmit = async data => {\n    try {\n      setLoading(true);\n      const {\n        data: { notice },\n      } = await registrationsApi.updatePassword({\n        user: {\n          email: user.email,\n          current_password: data.currentPassword,\n          password: data.password,\n          password_confirmation: data.confirmPassword,\n        },\n      });\n      history.push('/');\n      toast({\n        description: notice,\n        status: 'success',\n        duration: 1500,\n        isClosable: true,\n      });\n    } catch (error) {\n      toast({\n        description: error.response.data.error,\n        status: 'error',\n        duration: 1500,\n        isClosable: true,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Flex\n      minH={'90vh'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.50', 'gray.800')}\n    >\n      <Stack spacing={5} mx={'auto'}>\n        <Stack align={'center'}>\n          <Heading fontSize={'2xl'}>Change Password</Heading>\n        </Stack>\n        <Box\n          rounded={'lg'}\n          bg={useColorModeValue('white', 'gray.700')}\n          boxShadow={'lg'}\n          minWidth={['16em', '25em']}\n          p={8}\n        >\n          <Stack spacing={4}>\n            <Formik\n              initialValues={{\n                currentPassword: '',\n                password: '',\n                confirmPassword: '',\n              }}\n              validationSchema={validationSchema}\n              onSubmit={values => {\n                handleSubmit(values);\n              }}\n            >\n              {({ errors, touched }) => (\n                <Form>\n                  <Stack spacing={3}>\n                    <Box>\n                      <Field name=\"currentPassword\" width={'100%'}>\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.currentPassword &&\n                              form.touched.currentPassword\n                            }\n                          >\n                            <FormLabel htmlFor=\"currentPassword\">\n                              Current password *\n                            </FormLabel>\n                            <Input\n                              {...field}\n                              id=\"currentPassword\"\n                              type=\"password\"\n                              placeholder=\"******\"\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.currentPassword}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Box>\n                      <Field name=\"password\" width={'100%'}>\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.password && form.touched.password\n                            }\n                          >\n                            <FormLabel htmlFor=\"password\">\n                              New password *\n                            </FormLabel>\n                            <Input\n                              {...field}\n                              id=\"password\"\n                              type=\"password\"\n                              placeholder=\"******\"\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.password}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Box>\n                      <Field name=\"confirmPassword\" width={'100%'}>\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.confirmPassword &&\n                              form.touched.confirmPassword\n                            }\n                          >\n                            <FormLabel htmlFor=\"confirmPassword\">\n                              Confirm password *\n                            </FormLabel>\n                            <Input\n                              {...field}\n                              id=\"confirmPassword\"\n                              type=\"password\"\n                              placeholder=\"******\"\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.confirmPassword}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Stack spacing={10}>\n                      <Button\n                        isLoading={loading}\n                        bg={'blue.400'}\n                        color={'white'}\n                        _hover={{\n                          bg: 'blue.500',\n                        }}\n                        type=\"submit\"\n                      >\n                        Update\n                      </Button>\n                    </Stack>\n                    {/* <Field name=\"password\" />\n                  {errors.password && touched.password ? (\n                    <div>{errors.password}</div>\n                  ) : null} */}\n                    {/* <Field name=\"confirmPassword\" type=\"password\" />\n                    {errors.confirmPassword && touched.confirmPassword ? <div>{errors.confirmPassword}</div> : null} */}\n                    {/* <button type=\"submit\">Submit</button> */}\n                  </Stack>\n                </Form>\n              )}\n              {/* <form>\n                \n                <FormControl id=\"currentPassword\" name=\"currentPassword\">\n                  <FormLabel>Current password *</FormLabel>\n                  <Input type=\"password\" value={currentPassword} />\n                </FormControl>\n                <FormControl id=\"password\" name=\"password\">\n                  <FormLabel>Password *</FormLabel>\n                  <Input type=\"password\" value={password} />\n                </FormControl>\n                <FormControl id=\"confirmPassword\" name=\"confirmPassword\">\n                  <FormLabel>Confirm password</FormLabel>\n                  <Input type=\"password\" value={confirmPassword} />\n                </FormControl>\n                <Button\n                  name=\"submit\"\n                  type=\"submit\"\n                  className=\"w-full flex justify-center items-center\"\n                  label=\"Update\"\n                />\n              </form> */}\n            </Formik>\n          </Stack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n};\n\nexport default AccountEdit;\n","import React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport { Box } from '@chakra-ui/react'\nimport Navbar from \"../Common/Navbar\";\nimport MainSection from \"./MainSection\";\nimport Profile from \"./Account/Profile\";\nimport AccountEdit from \"./Account/AccountEdit\";\n\nconst Home = () => {\n  return (\n    <>\n      <Navbar />\n      <Box>\n        <Switch>\n          <Route exact path=\"/home\" component={MainSection} />\n          <Route exact path=\"/account/edit\" component={AccountEdit} />\n          <Route exact path=\"/profile\" component={Profile} />\n          <Redirect from=\"/\" to=\"/home\" />\n        </Switch>\n      </Box>\n    </>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nconst PrivateRoute = ({\n  component: Component,\n  condition,\n  path,\n  redirectRoute,\n  ...props\n}) => {\n  if (!condition) {\n    return (\n      <Redirect\n        to={{\n          pathname: redirectRoute,\n          from: props.location,\n        }}\n      />\n    );\n  }\n  return <Route path={path} component={Component} {...props} />;\n};\n\nPrivateRoute.propTypes = {\n  component: PropTypes.func,\n  condition: PropTypes.bool,\n  path: PropTypes.string,\n  redirectRoute: PropTypes.string,\n  location: PropTypes.object,\n};\n\nexport default PrivateRoute;\n","import { FormEvent, ChangeEvent, useState } from 'react';\nimport {\n  Stack,\n  FormControl,\n  Input,\n  Button,\n  useColorModeValue,\n  Heading,\n  Text,\n  Container,\n  Flex,\n  HStack,\n  Center,\n  Link as ChakraLink,\n  Box,\n} from '@chakra-ui/react';\nimport { Link } from 'react-router-dom';\nimport { CheckIcon } from '@chakra-ui/icons';\n\nconst InternalLink = ({ path, text }) => {\n  return (\n    <ChakraLink\n      as={Link}\n      to={path}\n      color={'blue.500'}\n      _hover={{ color: 'blue.300', textDecoration: 'none' }}\n    >\n      {text}\n    </ChakraLink>\n  );\n};\n\nexport default function New() {\n  const [email, setEmail] = useState('');\n  const [state, setState] = useState('initial');\n  const [error, setError] = useState(false);\n\n  return (\n    <Flex\n      minH={'100vh'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.50', 'gray.800')}\n    >\n      <Stack spacing={5} mx={'auto'} maxW={'lg'} py={8} px={6}>\n        <Stack align={'center'}>\n          <Heading fontSize={'4xl'}>Forgot your password?</Heading>\n        </Stack>\n        <Container\n          bg={useColorModeValue('white', 'whiteAlpha.100')}\n          boxShadow={'xl'}\n          rounded={'lg'}\n          p={6}\n          minWidth={['16em', '20em']}\n          direction={'column'}\n        >\n          <Stack\n            justifyContent=\"center\"\n            // direction={'column'}\n            direction={{ base: 'column', md: 'row' }}\n            as={'form'}\n            // spacing={'12px'}\n            onSubmit={e => {\n              e.preventDefault();\n              setError(false);\n              setState('submitting');\n              // remove this code and implement your submit logic right here\n              setTimeout(() => {\n                if (email === 'fail@example.com') {\n                  setError(true);\n                  setState('initial');\n                  return;\n                }\n                setState('success');\n              }, 1000);\n            }}\n          >\n            <FormControl>\n              <Input\n                variant={'solid'}\n                borderWidth={1}\n                color={'gray.800'}\n                _placeholder={{\n                  color: 'gray.400',\n                }}\n                borderColor={useColorModeValue('gray.300', 'gray.700')}\n                id={'email'}\n                type={'email'}\n                required\n                placeholder={'Your Email'}\n                aria-label={'Your Email'}\n                value={email}\n                disabled={state !== 'initial'}\n                onChange={e => setEmail(e.target.value)}\n              />\n            </FormControl>\n            <FormControl w={{ base: '100%', md: '40%' }}>\n              <Button\n                colorScheme={state === 'success' ? 'green' : 'blue'}\n                isLoading={state === 'submitting'}\n                w=\"100%\"\n                type={state === 'success' ? 'button' : 'submit'}\n              >\n                {state === 'success' ? <CheckIcon /> : 'Submit'}\n              </Button>\n            </FormControl>\n          </Stack>\n          <Text\n            mt={2}\n            textAlign={'center'}\n            color={error ? 'red.500' : 'gray.500'}\n          >\n            {error\n              ? 'Oh no an error occured! 😢 Please try again later.'\n              : \"You won't receive any spam! ✌️\"}\n          </Text>\n        </Container>\n        <Box px={8}>\n          <HStack justifyContent=\"space-between\" textAlign={'center'}>\n            <InternalLink text={'Back'} path={'/signin'} />\n            <InternalLink text={'Signup'} path={'/signup'} />\n          </HStack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n}\n","export const validateEmail = value => {\n  let error;\n  if (!value) {\n    error = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n};\n\nexport const validatePassword = value => {\n  let error;\n  if (!value) {\n    error = 'Required';\n  } else if (value.length < 5) {\n    error = 'Must be 6 characters or more';\n  }\n  return error;\n};\n\nexport const validateName = value => {\n  let error;\n  if (!value) {\n    error = 'Required';\n  }\n  return error;\n};\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Link as ChakraLink,\n  Button,\n  Heading,\n  useColorModeValue,\n  HStack,\n  useToast,\n  FormErrorMessage,\n} from '@chakra-ui/react';\nimport { setAuthHeaders } from '../../apis/axios';\nimport authenticationApi from '../../apis/authentication';\nimport { useAuthDispatch } from '../../contexts/auth';\nimport { useUserDispatch } from '../../contexts/user';\nimport { Formik, Field } from 'formik';\nimport { validateEmail, validatePassword, validateName } from './validations';\n\nconst InternalLink = ({ path, text }) => {\n  return (\n    <ChakraLink\n      as={Link}\n      to={path}\n      color={'blue.500'}\n      _hover={{ color: 'blue.300', textDecoration: 'none' }}\n    >\n      {text}\n    </ChakraLink>\n  );\n};\n\nconst Login = ({ history }) => {\n  const [initialValues, setInitialValues] = useState({\n    email: '',\n    password: '',\n  });\n  \n  const [loading, setLoading] = useState(false);\n  const authDispatch = useAuthDispatch();\n  const userDispatch = useUserDispatch();\n  const toast = useToast();\n\n  const handleSubmitExternally = async values => {\n    const { email, password } = values;\n    try {\n      setLoading(true);\n      const {\n        data: { auth_token, user, is_admin },\n      } = await authenticationApi.login({ user: { email, password } });\n      authDispatch({ type: 'LOGIN', payload: { auth_token, email, is_admin } });\n      userDispatch({ type: 'SET_USER', payload: { user } });\n      setAuthHeaders();\n      history.push('/');\n      toast({\n        description: 'Logged in successfully.',\n        status: 'success',\n        duration: 1500,\n        isClosable: true,\n      });\n    } catch (error) {\n      toast({\n        description: 'Incorrect email or password',\n        status: 'error',\n        duration: 1500,\n        isClosable: true,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Flex\n      minH={'100vh'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.50', 'gray.800')}\n    >\n      <Stack spacing={5} mx={'auto'} maxW={'lg'} py={8} px={6}>\n        <Stack align={'center'}>\n          <Heading fontSize={'4xl'}>Sign In</Heading>\n        </Stack>\n        <Box\n          rounded={'lg'}\n          bg={useColorModeValue('white', 'gray.700')}\n          boxShadow={'lg'}\n          minWidth={['16em', '20em']}\n          p={8}\n        >\n          <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={(values, actions) => {\n              handleSubmitExternally(values);\n              //   actions.resetForm({});\n              //   actions.setSubmitting(false);\n            }}\n          >\n            {({ values, handleChange, handleSubmit, isSubmitting }) => {\n              return (\n                <form onSubmit={handleSubmit}>\n                  <Stack spacing={4}>\n                    <Box>\n                      <Field\n                        name=\"email\"\n                        validate={validateEmail}\n                        width={'100%'}\n                      >\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={form.errors.email && form.touched.email}\n                          >\n                            <FormLabel htmlFor=\"email\">Email *</FormLabel>\n                            <Input\n                              {...field}\n                              id=\"email\"\n                              placeholder=\"Email\"\n                              value={values.email}\n                              onChange={handleChange}\n                            />\n                            <FormErrorMessage>\n                              {form.errors.email}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Box>\n                      <Field\n                        name=\"password\"\n                        validate={validatePassword}\n                        width={'100%'}\n                      >\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.password && form.touched.password\n                            }\n                          >\n                            <FormLabel htmlFor=\"password\">Password *</FormLabel>\n                            <Input\n                              {...field}\n                              type=\"password\"\n                              id=\"password\"\n                              placeholder=\"******\"\n                              value={values.password}\n                              onChange={handleChange}\n                            />\n                            <FormErrorMessage>\n                              {form.errors.password}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Stack spacing={10}>\n                      <Button\n                        isLoading={loading}\n                        bg={'blue.400'}\n                        color={'white'}\n                        _hover={{\n                          bg: 'blue.500',\n                        }}\n                        type=\"submit\"\n                      >\n                        Sign in\n                      </Button>\n                    </Stack>\n                  </Stack>\n                </form>\n              );\n            }}\n          </Formik>\n        </Box>\n        <Box px={8}>\n          <HStack justifyContent=\"space-between\">\n            <InternalLink text={'Signup'} path={'/signup'} />\n            <InternalLink text={'Forgot password?'} path={'/my/password/new'} />\n          </HStack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n};\n\nLogin.propTypes = {\n  history: PropTypes.object,\n};\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Link as ChakraLink,\n  Button,\n  Heading,\n  useColorModeValue,\n  HStack,\n  FormErrorMessage,\n  useToast\n} from '@chakra-ui/react';\nimport { setAuthHeaders } from '../../apis/axios';\nimport authenticationApi from '../../apis/authentication';\nimport { useAuthDispatch } from '../../contexts/auth';\nimport { useUserDispatch } from '../../contexts/user';\nimport { Formik, Field } from 'formik';\nimport { validateEmail, validatePassword, validateName } from './validations';\n\nconst InternalLink = ({ path, text }) => {\n  return (\n    <ChakraLink\n      as={Link}\n      to={path}\n      color={'blue.500'}\n      _hover={{ color: 'blue.300', textDecoration: 'none' }}\n    >\n      {text}\n    </ChakraLink>\n  );\n};\n\nconst Signup = ({ history }) => {\n  const [initialValues, setInitialValues] = useState({\n    email: '',\n    firstName: '',\n    lastName: '',\n    password: '',\n    passwordConfirmation: '',\n  });\n\n  // const [email, setEmail] = useState('');\n  // const [firstName, setFirstName] = useState('');\n  // const [lastName, setLastName] = useState('');\n  // const [password, setPassword] = useState('');\n  // const [passwordConfirmation, setPasswordConfirmation] = useState('');\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n  const authDispatch = useAuthDispatch();\n  const userDispatch = useUserDispatch();\n\n  const handleSubmitExternally = async values => {\n    const { email, firstName, lastName, password, passwordConfirmation } = values;\n    try {\n      setLoading(true);\n      const {\n        data: { user, auth_token },\n      } = await authenticationApi.signup({\n        user: {\n          email,\n          first_name: firstName,\n          last_name: lastName,\n          password: password,\n          password_confirmation: passwordConfirmation,\n        },\n      });\n      authDispatch({\n        type: 'LOGIN',\n        payload: { auth_token, email, is_admin: false },\n      });\n      userDispatch({ type: 'SET_USER', payload: { user } });\n      history.push('/');\n      toast({\n        description: 'Sign up successfully.',\n        status: 'success',\n        duration: 1500,\n        isClosable: true,\n      });\n    } catch (error) {\n      // alert(error.response.data.error);\n      toast({\n        description: error.response.data.error,\n        status: 'error',\n        duration: 1500,\n        isClosable: true,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Flex\n      minH={'100vh'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.50', 'gray.800')}\n    >\n      <Stack spacing={5} mx={'auto'} maxW={'lg'} py={8} px={6}>\n        <Stack align={'center'}>\n          <Heading fontSize={'4xl'}>Sign Up</Heading>\n        </Stack>\n        <Box\n          rounded={'lg'}\n          bg={useColorModeValue('white', 'gray.700')}\n          boxShadow={'lg'}\n          minWidth={['16em', '25em']}\n          px={8}\n          py={6}\n        >\n          <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={(values, actions) => {\n              handleSubmitExternally(values);\n            }}\n          >\n            {({ values, handleChange, handleSubmit, isSubmitting }) => {\n              return (\n                <form onSubmit={handleSubmit}>\n                  <Stack spacing={3}>\n                    <Box>\n                      <Field\n                        name=\"email\"\n                        validate={validateEmail}\n                        width={'100%'}\n                      >\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={form.errors.email && form.touched.email}\n                          >\n                            <FormLabel htmlFor=\"email\">Email *</FormLabel>\n                            <Input\n                              {...field}\n                              id=\"email\"\n                              placeholder=\"Email\"\n                              value={values.email}\n                              onChange={handleChange}\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.email}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Box>\n                      <Field\n                        name=\"firstName\"\n                        validate={validateName}\n                        width={'100%'}\n                      >\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.firstName && form.touched.firstName\n                            }\n                          >\n                            <FormLabel htmlFor=\"firstName\">\n                              First name *\n                            </FormLabel>\n                            <Input\n                              {...field}\n                              id=\"firstName\"\n                              placeholder=\"Muhammad\"\n                              value={values.firstName}\n                              onChange={handleChange}\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.firstName}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Box>\n                      <Field\n                        name=\"lastName\"\n                        validate={validateName}\n                        width={'100%'}\n                      >\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.lastName && form.touched.lastName\n                            }\n                          >\n                            <FormLabel htmlFor=\"lastName\">\n                              Last name *\n                            </FormLabel>\n                            <Input\n                              {...field}\n                              id=\"lastName\"\n                              placeholder=\"Ahmad\"\n                              value={values.lastName}\n                              onChange={handleChange}\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.lastName}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Box>\n                      <Field\n                        name=\"password\"\n                        validate={validatePassword}\n                        width={'100%'}\n                      >\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.password && form.touched.password\n                            }\n                          >\n                            <FormLabel htmlFor=\"password\">Password *</FormLabel>\n                            <Input\n                              {...field}\n                              type=\"password\"\n                              id=\"password\"\n                              placeholder=\"******\"\n                              value={values.password}\n                              onChange={handleChange}\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.password}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Box>\n                      <Field\n                        name=\"passwordConfirmation\"\n                        validate={validatePassword}\n                        width={'100%'}\n                      >\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.passwordConfirmation &&\n                              form.touched.passwordConfirmation\n                            }\n                          >\n                            <FormLabel htmlFor=\"passwordConfirmation\">\n                              Confirm password *\n                            </FormLabel>\n                            <Input\n                              {...field}\n                              type=\"password\"\n                              id=\"passwordConfirmation\"\n                              placeholder=\"******\"\n                              value={values.passwordConfirmation}\n                              onChange={handleChange}\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.passwordConfirmation}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n\n                    <Stack spacing={10}>\n                      <Button\n                      isLoading={loading}\n                        bg={'blue.400'}\n                        color={'white'}\n                        _hover={{\n                          bg: 'blue.500',\n                        }}\n                        type=\"submit\"\n                      >\n                        Sign up\n                      </Button>\n                    </Stack>\n                  </Stack>\n                </form>\n              );\n            }}\n          </Formik>\n        </Box>\n        <Box px={8} minWidth={['16em', '25em']}>\n          <HStack justifyContent=\"center\">\n            <InternalLink text={'Login'} path={'/signin'} />\n          </HStack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n};\n\nSignup.propTypes = {\n  history: PropTypes.object,\n};\n\nexport default Signup;\n","import {\n  Container,\n  Stack,\n  Flex,\n  Box,\n  Heading,\n  Text,\n  Button,\n  Image,\n  Icon,\n  IconButton,\n  createIcon,\n  IconProps,\n  useColorModeValue,\n  UnorderedList,\n  ListItem\n} from '@chakra-ui/react';\nimport { Link } from 'react-router-dom';\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\n\nexport default function CallToActionWithVideo() {\n  return (\n    <Container maxW={'7xl'}>\n      <Stack\n        align={'center'}\n        spacing={{ base: 8, md: 10 }}\n        py={{ base: 20, md: 28 }}\n        direction={{ base: 'column', md: 'row' }}>\n        <Stack flex={1} spacing={{ base: 5, md: 10 }}>\n          <Heading\n            lineHeight={1.1}\n            fontWeight={600}\n            fontSize={{ base: '3xl', sm: '4xl', lg: '6xl' }}>\n            <Text\n              as={'span'}\n              position={'relative'}\n              _after={{\n                content: \"''\",\n                width: 'full',\n                height: '30%',\n                position: 'absolute',\n                bottom: 1,\n                left: 0,\n                bg: 'red.400',\n                zIndex: -1,\n              }}>\n              Twitter Clone\n            </Text>\n            <br />\n            <Text as={'span'} color={'red.400'}>\n              React + Rails\n            </Text>\n          </Heading>\n          <Flex justifyContent=\"center\" textAlign=\"left\">\n            <UnorderedList>\n              <ListItem>Uses React on Front-end.</ListItem>\n              <ListItem>Uses Context API for state management.</ListItem>\n              <ListItem>Uses Rails on Back-end.</ListItem>\n              <ListItem>Uses ChakraUI for UI.</ListItem>\n              <ListItem>Uses Devise for User authentication(token based).</ListItem>\n              <ListItem>Uses PostgreSQL database.</ListItem>\n            </UnorderedList>\n          </Flex>\n          <Stack\n            spacing={{ base: 4, sm: 6 }}\n            direction={{ base: 'column', sm: 'row' }}>\n            <Button\n              rounded={'full'}\n              size={'lg'}\n              fontWeight={'normal'}\n              px={6}\n              colorScheme={'red'}\n              bg={'red.400'}\n              _hover={{ bg: 'red.500' }}\n              as={Link}\n              to=\"/login\">\n              Sign in\n            </Button>\n            <Button\n              rounded={'full'}\n              size={'lg'}\n              fontWeight={'normal'}\n              px={6}\n              as={Link}\n              to=\"/signup\">\n              Sign up\n            </Button>\n            <Button rounded={'full'}\n              size={'lg'}\n              fontWeight={'normal'}\n              px={6} >\n              <ColorModeSwitcher rounded={'full'}\n              size={'lg'}\n              fontWeight={'normal'}\n              px={6} />\n            </Button>\n          </Stack>\n        </Stack>\n        <Flex\n          flex={1}\n          justify={'center'}\n          align={'center'}\n          position={'relative'}\n          w={'full'}>\n          <Blob\n            w={'150%'}\n            h={'150%'}\n            position={'absolute'}\n            top={'-20%'}\n            left={0}\n            zIndex={-1}\n            color={useColorModeValue('red.50', 'red.400')}\n          />\n          <Box\n            position={'relative'}\n            height={'300px'}\n            rounded={'2xl'}\n            boxShadow={'2xl'}\n            width={'full'}\n            overflow={'hidden'}>\n            <IconButton\n              aria-label={'Play Button'}\n              variant={'ghost'}\n              _hover={{ bg: 'transparent' }}\n              icon={<PlayIcon w={12} h={12} />}\n              size={'lg'}\n              color={'white'}\n              position={'absolute'}\n              left={'50%'}\n              top={'50%'}\n              transform={'translateX(-50%) translateY(-50%)'}\n            />\n            <Image\n              alt={'Hero Image'}\n              fit={'cover'}\n              align={'center'}\n              w={'100%'}\n              h={'100%'}\n              src={\n                'https://images.unsplash.com/photo-1499951360447-b19be8fe80f5?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=800&q=80'\n              }\n            />\n          </Box>\n        </Flex>\n      </Stack>\n    </Container>\n  );\n}\n\nconst PlayIcon = createIcon({\n  displayName: 'PlayIcon',\n  viewBox: '0 0 58 58',\n  d:\n    'M28.9999 0.562988C13.3196 0.562988 0.562378 13.3202 0.562378 29.0005C0.562378 44.6808 13.3196 57.438 28.9999 57.438C44.6801 57.438 57.4374 44.6808 57.4374 29.0005C57.4374 13.3202 44.6801 0.562988 28.9999 0.562988ZM39.2223 30.272L23.5749 39.7247C23.3506 39.8591 23.0946 39.9314 22.8332 39.9342C22.5717 39.9369 22.3142 39.8701 22.0871 39.7406C21.86 39.611 21.6715 39.4234 21.5408 39.1969C21.4102 38.9705 21.3421 38.7133 21.3436 38.4519V19.5491C21.3421 19.2877 21.4102 19.0305 21.5408 18.8041C21.6715 18.5776 21.86 18.3899 22.0871 18.2604C22.3142 18.1308 22.5717 18.064 22.8332 18.0668C23.0946 18.0696 23.3506 18.1419 23.5749 18.2763L39.2223 27.729C39.4404 27.8619 39.6207 28.0486 39.7458 28.2713C39.8709 28.494 39.9366 28.7451 39.9366 29.0005C39.9366 29.2559 39.8709 29.507 39.7458 29.7297C39.6207 29.9523 39.4404 30.1391 39.2223 30.272Z',\n});\n\nexport const Blob = (props) => {\n  return (\n    <Icon\n      width={'100%'}\n      viewBox=\"0 0 578 440\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}>\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M239.184 439.443c-55.13-5.419-110.241-21.365-151.074-58.767C42.307 338.722-7.478 282.729.938 221.217c8.433-61.644 78.896-91.048 126.871-130.712 34.337-28.388 70.198-51.348 112.004-66.78C282.34 8.024 325.382-3.369 370.518.904c54.019 5.115 112.774 10.886 150.881 49.482 39.916 40.427 49.421 100.753 53.385 157.402 4.13 59.015 11.255 128.44-30.444 170.44-41.383 41.683-111.6 19.106-169.213 30.663-46.68 9.364-88.56 35.21-135.943 30.551z\"\n        fill=\"currentColor\"\n      />\n    </Icon>\n  );\n};\n","import React from \"react\";\nimport { Flex, Spinner } from \"@chakra-ui/react\";\nconst PageLoader = () => {\n  return (\n    <Flex\n      position=\"fixed\"\n      left={0}\n      right={0}\n      bottom={0}\n      top={0}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      bg=\"white\"\n      zIndex={999}\n    >\n      <Spinner thickness=\"4px\" color=\"gray.400\" />\n    </Flex>\n  );\n};\n\nexport default PageLoader;\n","import React, { useEffect, useState } from 'react';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { either, isEmpty, isNil } from 'ramda';\nimport { initializeLogger } from '../common/logger';\nimport Home from './Dashboard/index';\nimport PrivateRoute from './Common/PrivateRoute';\nimport PasswordReset from './Authentication/ResetPassword';\nimport Login from './Authentication/Login';\nimport Signup from './Authentication/Signup';\nimport Hero from './Home/Hero';\nimport { useAuthState, useAuthDispatch } from '../contexts/auth';\nimport { useUserDispatch } from '../contexts/user';\nimport { setAuthHeaders, registerIntercepts } from '../apis/axios';\nimport PageLoader from './Common/PageLoader';\n\nconst Main = props => {\n  const [loading, setLoading] = useState(true);\n  const { authToken } = useAuthState();\n  const userDispatch = useUserDispatch();\n  const authDispatch = useAuthDispatch();\n  const isLoggedIn = !either(isNil, isEmpty)(authToken);\n\n  useEffect(() => {\n    console.log(props)\n    if (props?.user)\n      userDispatch({ type: 'SET_USER', payload: { user: props.user } });\n    initializeLogger();\n    registerIntercepts(authDispatch);\n    setAuthHeaders(setLoading);\n  }, []);\n\n  if (loading) {\n    return <PageLoader />;\n  }\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/my/password/new\" component={PasswordReset} />\n        <Route exact path=\"/signup\" component={Signup} />\n        {!isLoggedIn && <Route exact path=\"/\" component={Hero} />}\n        <Route exact path=\"/login\" component={Login} />\n        <PrivateRoute\n          path=\"/\"\n          redirectRoute=\"/login\"\n          condition={isLoggedIn}\n          component={Home}\n        />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nMain.propTypes = {\n  user: PropTypes.object,\n};\n\nexport default Main;\n","export const initializeLogger = () => {\n  /* eslint no-undef: \"off\"*/\n  require(\"js-logger\").useDefaults();\n};\n","import React, { useEffect } from 'react';\nimport { ChakraProvider, Box, theme } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport Main from './components/Main';\n\nimport { AuthProvider } from './contexts/auth';\nimport { UserProvider } from './contexts/user';\n\n\nfunction App(props) {\n\n  useEffect(() => {\n    fetch('api/v1/users')\n      .then(res => res.json())\n      .then(data => console.log(data));\n  }, []);\n\n  return (\n    <AuthProvider>\n      <UserProvider>\n        <ChakraProvider theme={theme}>\n          <Box textAlign=\"center\" fontSize=\"xl\">\n\n            <Main {...props} />\n          </Box>\n        </ChakraProvider>\n      </UserProvider>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import { ADD_TWEET, DELETE_TWEET, GET_TWEETS } from \"../apis/tweet.action\";\n\nconst initialState = {};\n\nexport default function tweetReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_TWEETS:\n      return action.payload;\n    case ADD_TWEET:\n      return [action.payload, ...state];\n    case DELETE_TWEET:\n      return state.filter((tweet) => tweet.id !== action.payload.tweetId);\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport tweetReducer from \"./tweet.reducer\";\nimport userReducer from \"./user.reducer\";\n\nexport default combineReducers({\n  tweetReducer,\n  userReducer\n});\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.scss';\n\n//redux\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { getTweets } from './apis/tweet.action';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nstore.dispatch(getTweets());\n\nReactDOM.render(\n  <Provider store={store}>\n    <ColorModeScript />\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}