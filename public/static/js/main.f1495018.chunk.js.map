{"version":3,"sources":["reducers/auth.js","contexts/auth.js","apis/authentication.js","apis/axios.js","reducers/user.js","contexts/user.js","components/Common/Navbar.jsx","components/Dashboard/MainSection.jsx","components/Dashboard/Account/Profile.jsx","apis/registrations.js","components/Dashboard/Account/AccountEdit.jsx","components/Dashboard/index.jsx","components/Common/PrivateRoute.jsx","components/Authentication/ResetPassword.jsx","components/Authentication/validations.js","components/Authentication/Login.jsx","components/Authentication/Signup.jsx","components/Home/Hero.jsx","components/Common/PageLoader.jsx","components/Main.jsx","common/logger.js","App.js","index.js"],"names":["authReducer","state","type","payload","localStorage","setItem","JSON","stringify","auth_token","email","isLoggedIn","authToken","authEmail","Error","AuthStateContext","React","createContext","AuthDispatchContext","token","parse","getItem","initialState","AuthProvider","children","useReducer","dispatch","Provider","value","useAuthState","context","useContext","undefined","useAuthDispatch","baseUrl","authenticationApi","login","axios","post","logout","delete","signup","defaults","baseURL","setAuthHeaders","setLoading","headers","Accept","handleSuccessResponse","response","success","status","data","notice","registerIntercepts","authDispatch","interceptors","use","error","Promise","reject","handleErrorResponse","userReducer","user","UserStateContext","UserDispatchContext","UserProvider","useUserState","useUserDispatch","Links","NavLink","props","as","Link","px","py","rounded","_hover","textDecoration","bg","useColorModeValue","to","link","Navbar","contact","first_name","last_name","useDisclosure","isOpen","onOpen","onClose","handleLogout","a","window","location","href","h","alignItems","justifyContent","size","icon","Close","Hamburger","aria-label","display","md","onClick","spacing","base","map","Button","variant","cursor","name","fontSize","pb","MainSection","style","minHeight","direction","p","flex","align","justify","w","maxW","lg","position","_after","content","width","height","useBreakpointValue","bottom","left","zIndex","color","textAlign","alt","objectFit","src","Profile","useState","setEmail","firstName","setFirstName","lastName","setLastName","useEffect","minH","mx","boxShadow","minWidth","id","isReadOnly","registrationsApi","updatePassword","put","AccountEdit","history","loading","toast","useToast","validationSchema","Yup","currentPassword","required","password","confirmPassword","oneOf","handleSubmit","current_password","password_confirmation","push","description","duration","isClosable","initialValues","onSubmit","values","errors","touched","field","form","isInvalid","htmlFor","placeholder","mt","isLoading","Home","exact","path","component","from","PrivateRoute","Component","condition","redirectRoute","pathname","InternalLink","text","New","setState","setError","e","preventDefault","setTimeout","borderWidth","_placeholder","borderColor","disabled","onChange","target","colorScheme","Check","validateEmail","test","validatePassword","length","validateName","Login","userDispatch","handleSubmitExternally","is_admin","enableReinitialize","actions","handleChange","isSubmitting","validate","Signup","passwordConfirmation","CallToActionWithVideo","lineHeight","fontWeight","sm","top","overflow","PlayIcon","transform","fit","createIcon","displayName","viewBox","d","Blob","fill","xmlns","fillRule","clipRule","PageLoader","right","thickness","Main","either","isNil","isEmpty","console","log","require","useDefaults","PasswordReset","Hero","App","theme","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1495018.chunk.js","sourcesContent":["const authReducer = (state, { type, payload }) => {\n  switch (type) {\n    case 'LOGIN': {\n      localStorage.setItem('authToken', JSON.stringify(payload.auth_token));\n      localStorage.setItem('authEmail', JSON.stringify(payload.email));\n      return {\n        isLoggedIn: true,\n        authToken: payload.auth_token,\n        authEmail: payload.email,\n      };\n    }\n    case 'LOGOUT': {\n      localStorage.setItem('authToken', JSON.stringify(null));\n      localStorage.setItem('authEmail', JSON.stringify(null));\n      localStorage.setItem('currentUser', JSON.stringify(null));\n      return { isLoggedIn: false, authToken: null, authEmail: null };\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${type}`);\n    }\n  }\n};\n\nexport default authReducer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport authReducer from '../reducers/auth';\n\nconst AuthStateContext = React.createContext();\nconst AuthDispatchContext = React.createContext();\n\nconst token = JSON.parse(localStorage.getItem('authToken'));\nconst email = JSON.parse(localStorage.getItem('authEmail'));\nconst initialState = {\n  isLoggedIn: !!token,\n  authToken: token ? token : null,\n  authEmail: email ? email : null,\n};\n\nconst AuthProvider = ({ children }) => {\n  const [state, dispatch] = React.useReducer(authReducer, initialState);\n  return (\n    <AuthStateContext.Provider value={state}>\n      <AuthDispatchContext.Provider value={dispatch}>\n        {children}\n      </AuthDispatchContext.Provider>\n    </AuthStateContext.Provider>\n  );\n};\n\nconst useAuthState = () => {\n  const context = React.useContext(AuthStateContext);\n  if (context === undefined) {\n    throw new Error('useAuthState must be used within a AuthProvider');\n  }\n  return context;\n};\n\nconst useAuthDispatch = () => {\n  const context = React.useContext(AuthDispatchContext);\n  if (context === undefined) {\n    throw new Error('useAuthDispatch must be used within a AuthProvider');\n  }\n  return context;\n};\n\nconst useAuth = () => {\n  return [useAuthState(), useAuthDispatch()];\n};\n\nAuthProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nexport { AuthProvider, useAuthState, useAuthDispatch, useAuth };\n","import axios from 'axios';\n\n// const baseUrl = 'http://localhost:3001/';\nconst baseUrl = 'https://react-testing-deploying.herokuapp.com/';\n\nconst login = payload => axios.post(`${baseUrl}api/v1/login`, payload);\n\nconst logout = () => axios.delete(`${baseUrl}api/v1/logout`);\n\nconst signup = payload => axios.post(`${baseUrl}api/v1/users`, payload);\n\nconst authenticationApi = {\n  login,\n  logout,\n  signup,\n};\n\nexport default authenticationApi;\n","import axios from 'axios';\n// import { Toastr } from \"neetoui\";\n\naxios.defaults.baseURL = '/';\n\nexport const setAuthHeaders = (setLoading = () => null) => {\n  axios.defaults.headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  };\n  const token = JSON.parse(localStorage.getItem('authToken'));\n  const email = JSON.parse(localStorage.getItem('authEmail'));\n  if (token && email) {\n    axios.defaults.headers['X-Auth-Email'] = email;\n    axios.defaults.headers['X-Auth-Token'] = token;\n  }\n  setLoading(false);\n};\n\nexport const resetAuthTokens = () => {\n  delete axios.defaults.headers['X-Auth-Email'];\n  delete axios.defaults.headers['X-Auth-Token'];\n};\n\nconst handleSuccessResponse = response => {\n  if (response) {\n    response.success = response.status === 200;\n    if (response.data.notice) {\n      // Toastr.success(response.data.notice);\n    }\n  }\n  return response;\n};\n\nconst handleErrorResponse = (error, authDispatch) => {\n  if (error.response?.status === 401) {\n    authDispatch({ type: 'LOGOUT' });\n    // Toastr.error(error.response?.data?.error);\n  } else {\n    // Toastr.error(error.response?.data?.error || error.message);\n  }\n  return Promise.reject(error);\n};\n\nexport const registerIntercepts = authDispatch => {\n  axios.interceptors.response.use(handleSuccessResponse, error =>\n    handleErrorResponse(error, authDispatch)\n  );\n};\n","const userReducer = (state, { type, payload }) => {\n  switch (type) {\n    case 'SET_USER': {\n      localStorage.setItem('currentUser', JSON.stringify(payload.user));\n      return {\n        user: payload.user,\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${type}`);\n    }\n  }\n};\n\nexport default userReducer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport userReducer from '../reducers/user';\n\nconst UserStateContext = React.createContext();\nconst UserDispatchContext = React.createContext();\n\nconst user = JSON.parse(localStorage.getItem('currentUser'));\nconst initialState = { user: user ? user : null };\n\nconst UserProvider = ({ children }) => {\n  const [state, dispatch] = React.useReducer(userReducer, initialState);\n  return (\n    <UserStateContext.Provider value={state}>\n      <UserDispatchContext.Provider value={dispatch}>\n        {children}\n      </UserDispatchContext.Provider>\n    </UserStateContext.Provider>\n  );\n};\n\nconst useUserState = () => {\n  const context = React.useContext(UserStateContext);\n  if (context === undefined) {\n    throw new Error('useUserState must be used within a UserProvider');\n  }\n  return context;\n};\n\nconst useUserDispatch = () => {\n  const context = React.useContext(UserDispatchContext);\n  if (context === undefined) {\n    throw new Error('useUserDispatch must be used within a UserProvider');\n  }\n  return context;\n};\n\nconst useUser = () => {\n  return [useUserState(), useUserDispatch()];\n};\n\nUserProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nexport { UserProvider, useUserState, useUserDispatch, useUser };\n","import { ReactNode } from 'react';\nimport {\n  Box,\n  Flex,\n  Avatar,\n  HStack,\n  Link as ChakraLink,\n  IconButton,\n  Button,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  MenuDivider,\n  useDisclosure,\n  useColorModeValue,\n  Stack,\n} from '@chakra-ui/react';\nimport { HamburgerIcon, CloseIcon } from '@chakra-ui/icons';\nimport { useAuthDispatch } from '../../contexts/auth';\nimport authenticationApi from '../../apis/authentication';\nimport { resetAuthTokens } from '../../apis/axios';\nimport { useUserState } from '../../contexts/user';\nimport { Link } from 'react-router-dom';\n\nconst Links = ['QuickStart', 'Profile'];\n\nconst NavLink = props => (\n  <ChakraLink\n    as={Link}\n    px={2}\n    py={1}\n    rounded={'md'}\n    _hover={{\n      textDecoration: 'none',\n      bg: useColorModeValue('gray.200', 'gray.700'),\n    }}\n    to={`/${props.link}`}\n  >\n    {props.link}\n  </ChakraLink>\n);\n\nconst Navbar = () => {\n  const { user } = useUserState();\n  const contact = user ? `${user.first_name} ${user.last_name}` : 'user';\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const authDispatch = useAuthDispatch();\n  const handleLogout = async () => {\n    try {\n      await authenticationApi.logout();\n      authDispatch({ type: 'LOGOUT' });\n      resetAuthTokens();\n      window.location.href = '/';\n    } catch (error) {\n      //   Toastr.error(error);\n    }\n  };\n\n  return (\n    <>\n      <Box bg={useColorModeValue('gray.100', 'gray.900')} px={4}>\n        <Flex h={16} alignItems={'center'} justifyContent={'space-between'}>\n          <IconButton\n            size={'md'}\n            icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}\n            aria-label={'Open Menu'}\n            display={{ md: !isOpen ? 'none' : 'inherit' }}\n            onClick={isOpen ? onClose : onOpen}\n          />\n          <HStack spacing={8} alignItems={'center'}>\n            <HStack\n              as={'nav'}\n              spacing={4}\n              display={{ base: 'none', md: 'flex' }}\n            >\n              {Links.map(link => (\n                <NavLink key={link} link={link} />\n              ))}\n            </HStack>\n          </HStack>\n          <Flex alignItems={'center'}>\n            <Menu>\n              <MenuButton\n                as={Button}\n                size={'sm'}\n                rounded={'full'}\n                variant={'link'}\n                cursor={'pointer'}\n                _hover={{ textDecoration: 'none' }}\n              >\n                <Avatar size={'sm'} name={contact} />\n              </MenuButton>\n              <MenuList fontSize={17}>\n                <MenuItem as={Link} to=\"/profile\">\n                  My profile\n                </MenuItem>\n                <MenuItem as={Link} to=\"/account/edit\">\n                  Change password\n                </MenuItem>\n                <MenuItem onClick={handleLogout}>Logout</MenuItem>\n              </MenuList>\n            </Menu>\n          </Flex>\n        </Flex>\n\n        {isOpen ? (\n          <Box pb={4}>\n            <Stack as={'nav'} spacing={4}>\n              {Links.map(link => (\n                <NavLink key={link} link={link} />\n              ))}\n            </Stack>\n          </Box>\n        ) : null}\n      </Box>\n    </>\n  );\n};\n\nexport default Navbar;\n","import {\n  Button,\n  Flex,\n  Heading,\n  Image,\n  Stack,\n  Text,\n  useBreakpointValue,\n  UnorderedList,\n  ListItem\n} from '@chakra-ui/react';\n\nexport default function MainSection() {\n  return (\n    <Stack style={{ minHeight: 'calc(100vh - 4rem)' }} direction={{ base: 'column', md: 'row' }}>\n      <Flex p={8} flex={1} align={'center'} justify={'center'}>\n        <Stack spacing={6} w={'full'} maxW={'lg'}>\n          <Heading fontSize={{ base: '3xl', md: '4xl', lg: '5xl' }}>\n            <Text\n              as={'span'}\n              position={'relative'}\n              _after={{\n                content: \"''\",\n                width: 'full',\n                height: useBreakpointValue({ base: '20%', md: '30%' }),\n                position: 'absolute',\n                bottom: 1,\n                left: 0,\n                bg: 'blue.400',\n                zIndex: -1,\n              }}\n            >\n              QuickStart\n            </Text>\n            <br />{' '}\n            <Text color={'blue.400'} as={'span'}>\n              React + Rails\n            </Text>{' '}\n          </Heading>\n          <Flex justifyContent=\"center\" textAlign=\"left\">\n            <UnorderedList>\n              <ListItem>Uses React on Front-end.</ListItem>\n              <ListItem>Uses Context API for state management.</ListItem>\n              <ListItem>Uses Rails on Back-end.</ListItem>\n              <ListItem>Uses ChakraUI for UI.</ListItem>\n              <ListItem>Uses Devise for User authentication(token based).</ListItem>\n              <ListItem>Uses PostgreSQL database.</ListItem>\n            </UnorderedList>\n          </Flex>\n        </Stack>\n      </Flex>\n      <Flex flex={1}>\n        <Image\n          alt={'Login Image'}\n          objectFit={'cover'}\n          src={\n            'https://images.unsplash.com/photo-1527689368864-3a821dbccc34?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80'\n          }\n        />\n      </Flex>\n    </Stack>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Link as ChakraLink,\n  Button,\n  Heading,\n  useColorModeValue,\n  HStack,\n  FormErrorMessage,\n  useToast,\n} from '@chakra-ui/react';\nimport { useUserState } from '../../../contexts/user';\n\nconst Profile = () => {\n  const { user } = useUserState();\n\n  const [email, setEmail] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  useEffect(() => {\n    if (user) {\n      setEmail(user.email);\n      setFirstName(user.first_name);\n      setLastName(user.last_name);\n    }\n  }, [user]);\n\n  return (\n    <Flex\n      minH={'90vh'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.50', 'gray.800')}\n    >\n      <Stack spacing={5} mx={'auto'}>\n        <Stack align={'center'}>\n          <Heading fontSize={'2xl'}>Profile</Heading>\n        </Stack>\n        <Box\n          rounded={'lg'}\n          bg={useColorModeValue('white', 'gray.700')}\n          boxShadow={'lg'}\n          minWidth={['16em', '25em']}\n          p={8}\n        >\n          <Stack spacing={4}>\n            <FormControl id=\"email\">\n              <FormLabel>Email address</FormLabel>\n              <Input type=\"email\" value={email} isReadOnly />\n            </FormControl>\n            <FormControl id=\"firstName\">\n              <FormLabel>First Name</FormLabel>\n              <Input type=\"text\" value={firstName} isReadOnly />\n            </FormControl>\n            <FormControl id=\"lastName\">\n              <FormLabel>Last Name</FormLabel>\n              <Input type=\"text\" value={lastName} isReadOnly />\n            </FormControl>\n          </Stack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n};\n\nexport default Profile;\n","import axios from 'axios';\n\n// const baseUrl = 'http://localhost:3001/';\nconst baseUrl = 'https://react-testing-deploying.herokuapp.com/';\n\nconst updatePassword = payload =>\n  axios.put(`${baseUrl}api/v1/password/update`, payload);\n\nconst registrationsApi = {\n  updatePassword,\n};\n\nexport default registrationsApi;\n","import React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport { Formik, Form, Field } from 'formik';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Link as ChakraLink,\n  Button,\n  Heading,\n  useColorModeValue,\n  HStack,\n  FormErrorMessage,\n  useToast,\n} from '@chakra-ui/react';\nimport registrationsApi from '../../../apis/registrations';\nimport { useUserState } from '../../../contexts/user';\n\nconst AccountEdit = ({ history }) => {\n  const { user } = useUserState();\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  const validationSchema = Yup.object({\n    currentPassword: Yup.string().required('Current password is required'),\n    password: Yup.string().required('New password is required'),\n    confirmPassword: Yup.string()\n      .required('Password confirmation is required')\n      .oneOf([Yup.ref('password'), null], 'Passwords must match'),\n  });\n\n  const formikInputAttrs = {\n    type: 'password',\n    'aria-required': 'true',\n    placeholder: '******',\n  };\n\n  const handleSubmit = async data => {\n    try {\n      setLoading(true);\n      const {\n        data: { notice },\n      } = await registrationsApi.updatePassword({\n        user: {\n          email: user.email,\n          current_password: data.currentPassword,\n          password: data.password,\n          password_confirmation: data.confirmPassword,\n        },\n      });\n      history.push('/');\n      toast({\n        description: notice,\n        status: 'success',\n        duration: 1500,\n        isClosable: true,\n      });\n    } catch (error) {\n      toast({\n        description: error.response.data.error,\n        status: 'error',\n        duration: 1500,\n        isClosable: true,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Flex\n      minH={'90vh'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.50', 'gray.800')}\n    >\n      <Stack spacing={5} mx={'auto'}>\n        <Stack align={'center'}>\n          <Heading fontSize={'2xl'}>Change Password</Heading>\n        </Stack>\n        <Box\n          rounded={'lg'}\n          bg={useColorModeValue('white', 'gray.700')}\n          boxShadow={'lg'}\n          minWidth={['16em', '25em']}\n          p={8}\n        >\n          <Stack spacing={4}>\n            <Formik\n              initialValues={{\n                currentPassword: '',\n                password: '',\n                confirmPassword: '',\n              }}\n              validationSchema={validationSchema}\n              onSubmit={values => {\n                handleSubmit(values);\n              }}\n            >\n              {({ errors, touched }) => (\n                <Form>\n                  <Stack spacing={3}>\n                    <Box>\n                      <Field name=\"currentPassword\" width={'100%'}>\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.currentPassword &&\n                              form.touched.currentPassword\n                            }\n                          >\n                            <FormLabel htmlFor=\"currentPassword\">\n                              Current password *\n                            </FormLabel>\n                            <Input\n                              {...field}\n                              id=\"currentPassword\"\n                              type=\"password\"\n                              placeholder=\"******\"\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.currentPassword}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Box>\n                      <Field name=\"password\" width={'100%'}>\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.password && form.touched.password\n                            }\n                          >\n                            <FormLabel htmlFor=\"password\">\n                              New password *\n                            </FormLabel>\n                            <Input\n                              {...field}\n                              id=\"password\"\n                              type=\"password\"\n                              placeholder=\"******\"\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.password}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Box>\n                      <Field name=\"confirmPassword\" width={'100%'}>\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.confirmPassword &&\n                              form.touched.confirmPassword\n                            }\n                          >\n                            <FormLabel htmlFor=\"confirmPassword\">\n                              Confirm password *\n                            </FormLabel>\n                            <Input\n                              {...field}\n                              id=\"confirmPassword\"\n                              type=\"password\"\n                              placeholder=\"******\"\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.confirmPassword}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Stack spacing={10}>\n                      <Button\n                        isLoading={loading}\n                        bg={'blue.400'}\n                        color={'white'}\n                        _hover={{\n                          bg: 'blue.500',\n                        }}\n                        type=\"submit\"\n                      >\n                        Update\n                      </Button>\n                    </Stack>\n                    {/* <Field name=\"password\" />\n                  {errors.password && touched.password ? (\n                    <div>{errors.password}</div>\n                  ) : null} */}\n                    {/* <Field name=\"confirmPassword\" type=\"password\" />\n                    {errors.confirmPassword && touched.confirmPassword ? <div>{errors.confirmPassword}</div> : null} */}\n                    {/* <button type=\"submit\">Submit</button> */}\n                  </Stack>\n                </Form>\n              )}\n              {/* <form>\n                \n                <FormControl id=\"currentPassword\" name=\"currentPassword\">\n                  <FormLabel>Current password *</FormLabel>\n                  <Input type=\"password\" value={currentPassword} />\n                </FormControl>\n                <FormControl id=\"password\" name=\"password\">\n                  <FormLabel>Password *</FormLabel>\n                  <Input type=\"password\" value={password} />\n                </FormControl>\n                <FormControl id=\"confirmPassword\" name=\"confirmPassword\">\n                  <FormLabel>Confirm password</FormLabel>\n                  <Input type=\"password\" value={confirmPassword} />\n                </FormControl>\n                <Button\n                  name=\"submit\"\n                  type=\"submit\"\n                  className=\"w-full flex justify-center items-center\"\n                  label=\"Update\"\n                />\n              </form> */}\n            </Formik>\n          </Stack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n};\n\nexport default AccountEdit;\n","import React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport { Box } from '@chakra-ui/react'\nimport Navbar from \"../Common/Navbar\";\nimport MainSection from \"./MainSection\";\nimport Profile from \"./Account/Profile\";\nimport AccountEdit from \"./Account/AccountEdit\";\n\nconst Home = () => {\n  return (\n    <>\n      <Navbar />\n      <Box>\n        <Switch>\n          <Route exact path=\"/home\" component={MainSection} />\n          <Route exact path=\"/account/edit\" component={AccountEdit} />\n          <Route exact path=\"/profile\" component={Profile} />\n          <Redirect from=\"/\" to=\"/home\" />\n        </Switch>\n      </Box>\n    </>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nconst PrivateRoute = ({\n  component: Component,\n  condition,\n  path,\n  redirectRoute,\n  ...props\n}) => {\n  if (!condition) {\n    return (\n      <Redirect\n        to={{\n          pathname: redirectRoute,\n          from: props.location,\n        }}\n      />\n    );\n  }\n  return <Route path={path} component={Component} {...props} />;\n};\n\nPrivateRoute.propTypes = {\n  component: PropTypes.func,\n  condition: PropTypes.bool,\n  path: PropTypes.string,\n  redirectRoute: PropTypes.string,\n  location: PropTypes.object,\n};\n\nexport default PrivateRoute;\n","import { FormEvent, ChangeEvent, useState } from 'react';\nimport {\n  Stack,\n  FormControl,\n  Input,\n  Button,\n  useColorModeValue,\n  Heading,\n  Text,\n  Container,\n  Flex,\n  HStack,\n  Center,\n  Link as ChakraLink,\n  Box,\n} from '@chakra-ui/react';\nimport { Link } from 'react-router-dom';\nimport { CheckIcon } from '@chakra-ui/icons';\n\nconst InternalLink = ({ path, text }) => {\n  return (\n    <ChakraLink\n      as={Link}\n      to={path}\n      color={'blue.500'}\n      _hover={{ color: 'blue.300', textDecoration: 'none' }}\n    >\n      {text}\n    </ChakraLink>\n  );\n};\n\nexport default function New() {\n  const [email, setEmail] = useState('');\n  const [state, setState] = useState('initial');\n  const [error, setError] = useState(false);\n\n  return (\n    <Flex\n      minH={'100vh'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.50', 'gray.800')}\n    >\n      <Stack spacing={5} mx={'auto'} maxW={'lg'} py={8} px={6}>\n        <Stack align={'center'}>\n          <Heading fontSize={'4xl'}>Forgot your password?</Heading>\n        </Stack>\n        <Container\n          bg={useColorModeValue('white', 'whiteAlpha.100')}\n          boxShadow={'xl'}\n          rounded={'lg'}\n          p={6}\n          minWidth={['16em', '20em']}\n          direction={'column'}\n        >\n          <Stack\n            justifyContent=\"center\"\n            // direction={'column'}\n            direction={{ base: 'column', md: 'row' }}\n            as={'form'}\n            // spacing={'12px'}\n            onSubmit={e => {\n              e.preventDefault();\n              setError(false);\n              setState('submitting');\n              // remove this code and implement your submit logic right here\n              setTimeout(() => {\n                if (email === 'fail@example.com') {\n                  setError(true);\n                  setState('initial');\n                  return;\n                }\n                setState('success');\n              }, 1000);\n            }}\n          >\n            <FormControl>\n              <Input\n                variant={'solid'}\n                borderWidth={1}\n                color={'gray.800'}\n                _placeholder={{\n                  color: 'gray.400',\n                }}\n                borderColor={useColorModeValue('gray.300', 'gray.700')}\n                id={'email'}\n                type={'email'}\n                required\n                placeholder={'Your Email'}\n                aria-label={'Your Email'}\n                value={email}\n                disabled={state !== 'initial'}\n                onChange={e => setEmail(e.target.value)}\n              />\n            </FormControl>\n            <FormControl w={{ base: '100%', md: '40%' }}>\n              <Button\n                colorScheme={state === 'success' ? 'green' : 'blue'}\n                isLoading={state === 'submitting'}\n                w=\"100%\"\n                type={state === 'success' ? 'button' : 'submit'}\n              >\n                {state === 'success' ? <CheckIcon /> : 'Submit'}\n              </Button>\n            </FormControl>\n          </Stack>\n          <Text\n            mt={2}\n            textAlign={'center'}\n            color={error ? 'red.500' : 'gray.500'}\n          >\n            {error\n              ? 'Oh no an error occured! 😢 Please try again later.'\n              : \"You won't receive any spam! ✌️\"}\n          </Text>\n        </Container>\n        <Box px={8}>\n          <HStack justifyContent=\"space-between\" textAlign={'center'}>\n            <InternalLink text={'Back'} path={'/signin'} />\n            <InternalLink text={'Signup'} path={'/signup'} />\n          </HStack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n}\n","export const validateEmail = value => {\n  let error;\n  if (!value) {\n    error = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n};\n\nexport const validatePassword = value => {\n  let error;\n  if (!value) {\n    error = 'Required';\n  } else if (value.length < 5) {\n    error = 'Must be 6 characters or more';\n  }\n  return error;\n};\n\nexport const validateName = value => {\n  let error;\n  if (!value) {\n    error = 'Required';\n  }\n  return error;\n};\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Link as ChakraLink,\n  Button,\n  Heading,\n  useColorModeValue,\n  HStack,\n  useToast,\n  FormErrorMessage,\n} from '@chakra-ui/react';\nimport { setAuthHeaders } from '../../apis/axios';\nimport authenticationApi from '../../apis/authentication';\nimport { useAuthDispatch } from '../../contexts/auth';\nimport { useUserDispatch } from '../../contexts/user';\nimport { Formik, Field } from 'formik';\nimport { validateEmail, validatePassword, validateName } from './validations';\n\nconst InternalLink = ({ path, text }) => {\n  return (\n    <ChakraLink\n      as={Link}\n      to={path}\n      color={'blue.500'}\n      _hover={{ color: 'blue.300', textDecoration: 'none' }}\n    >\n      {text}\n    </ChakraLink>\n  );\n};\n\nconst Login = ({ history }) => {\n  const [initialValues, setInitialValues] = useState({\n    email: '',\n    password: '',\n  });\n  \n  const [loading, setLoading] = useState(false);\n  const authDispatch = useAuthDispatch();\n  const userDispatch = useUserDispatch();\n  const toast = useToast();\n\n  const handleSubmitExternally = async values => {\n    const { email, password } = values;\n    try {\n      setLoading(true);\n      const {\n        data: { auth_token, user, is_admin },\n      } = await authenticationApi.login({ user: { email, password } });\n      authDispatch({ type: 'LOGIN', payload: { auth_token, email, is_admin } });\n      userDispatch({ type: 'SET_USER', payload: { user } });\n      setAuthHeaders();\n      history.push('/');\n      toast({\n        description: 'Logged in successfully.',\n        status: 'success',\n        duration: 1500,\n        isClosable: true,\n      });\n    } catch (error) {\n      toast({\n        description: 'Incorrect email or password',\n        status: 'error',\n        duration: 1500,\n        isClosable: true,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Flex\n      minH={'100vh'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.50', 'gray.800')}\n    >\n      <Stack spacing={5} mx={'auto'} maxW={'lg'} py={8} px={6}>\n        <Stack align={'center'}>\n          <Heading fontSize={'4xl'}>Sign In</Heading>\n        </Stack>\n        <Box\n          rounded={'lg'}\n          bg={useColorModeValue('white', 'gray.700')}\n          boxShadow={'lg'}\n          minWidth={['16em', '20em']}\n          p={8}\n        >\n          <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={(values, actions) => {\n              handleSubmitExternally(values);\n              //   actions.resetForm({});\n              //   actions.setSubmitting(false);\n            }}\n          >\n            {({ values, handleChange, handleSubmit, isSubmitting }) => {\n              return (\n                <form onSubmit={handleSubmit}>\n                  <Stack spacing={4}>\n                    <Box>\n                      <Field\n                        name=\"email\"\n                        validate={validateEmail}\n                        width={'100%'}\n                      >\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={form.errors.email && form.touched.email}\n                          >\n                            <FormLabel htmlFor=\"email\">Email *</FormLabel>\n                            <Input\n                              {...field}\n                              id=\"email\"\n                              placeholder=\"Email\"\n                              value={values.email}\n                              onChange={handleChange}\n                            />\n                            <FormErrorMessage>\n                              {form.errors.email}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Box>\n                      <Field\n                        name=\"password\"\n                        validate={validatePassword}\n                        width={'100%'}\n                      >\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.password && form.touched.password\n                            }\n                          >\n                            <FormLabel htmlFor=\"password\">Password *</FormLabel>\n                            <Input\n                              {...field}\n                              type=\"password\"\n                              id=\"password\"\n                              placeholder=\"******\"\n                              value={values.password}\n                              onChange={handleChange}\n                            />\n                            <FormErrorMessage>\n                              {form.errors.password}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Stack spacing={10}>\n                      <Button\n                        isLoading={loading}\n                        bg={'blue.400'}\n                        color={'white'}\n                        _hover={{\n                          bg: 'blue.500',\n                        }}\n                        type=\"submit\"\n                      >\n                        Sign in\n                      </Button>\n                    </Stack>\n                  </Stack>\n                </form>\n              );\n            }}\n          </Formik>\n        </Box>\n        <Box px={8}>\n          <HStack justifyContent=\"space-between\">\n            <InternalLink text={'Signup'} path={'/signup'} />\n            <InternalLink text={'Forgot password?'} path={'/my/password/new'} />\n          </HStack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n};\n\nLogin.propTypes = {\n  history: PropTypes.object,\n};\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Link as ChakraLink,\n  Button,\n  Heading,\n  useColorModeValue,\n  HStack,\n  FormErrorMessage,\n  useToast\n} from '@chakra-ui/react';\nimport { setAuthHeaders } from '../../apis/axios';\nimport authenticationApi from '../../apis/authentication';\nimport { useAuthDispatch } from '../../contexts/auth';\nimport { useUserDispatch } from '../../contexts/user';\nimport { Formik, Field } from 'formik';\nimport { validateEmail, validatePassword, validateName } from './validations';\n\nconst InternalLink = ({ path, text }) => {\n  return (\n    <ChakraLink\n      as={Link}\n      to={path}\n      color={'blue.500'}\n      _hover={{ color: 'blue.300', textDecoration: 'none' }}\n    >\n      {text}\n    </ChakraLink>\n  );\n};\n\nconst Signup = ({ history }) => {\n  const [initialValues, setInitialValues] = useState({\n    email: '',\n    firstName: '',\n    lastName: '',\n    password: '',\n    passwordConfirmation: '',\n  });\n\n  // const [email, setEmail] = useState('');\n  // const [firstName, setFirstName] = useState('');\n  // const [lastName, setLastName] = useState('');\n  // const [password, setPassword] = useState('');\n  // const [passwordConfirmation, setPasswordConfirmation] = useState('');\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n  const authDispatch = useAuthDispatch();\n  const userDispatch = useUserDispatch();\n\n  const handleSubmitExternally = async values => {\n    const { email, firstName, lastName, password, passwordConfirmation } = values;\n    try {\n      setLoading(true);\n      const {\n        data: { user, auth_token },\n      } = await authenticationApi.signup({\n        user: {\n          email,\n          first_name: firstName,\n          last_name: lastName,\n          password: password,\n          password_confirmation: passwordConfirmation,\n        },\n      });\n      authDispatch({\n        type: 'LOGIN',\n        payload: { auth_token, email, is_admin: false },\n      });\n      userDispatch({ type: 'SET_USER', payload: { user } });\n      history.push('/');\n      toast({\n        description: 'Sign up successfully.',\n        status: 'success',\n        duration: 1500,\n        isClosable: true,\n      });\n    } catch (error) {\n      // alert(error.response.data.error);\n      toast({\n        description: error.response.data.error,\n        status: 'error',\n        duration: 1500,\n        isClosable: true,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Flex\n      minH={'100vh'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.50', 'gray.800')}\n    >\n      <Stack spacing={5} mx={'auto'} maxW={'lg'} py={8} px={6}>\n        <Stack align={'center'}>\n          <Heading fontSize={'4xl'}>Sign Up</Heading>\n        </Stack>\n        <Box\n          rounded={'lg'}\n          bg={useColorModeValue('white', 'gray.700')}\n          boxShadow={'lg'}\n          minWidth={['16em', '25em']}\n          px={8}\n          py={6}\n        >\n          <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={(values, actions) => {\n              handleSubmitExternally(values);\n            }}\n          >\n            {({ values, handleChange, handleSubmit, isSubmitting }) => {\n              return (\n                <form onSubmit={handleSubmit}>\n                  <Stack spacing={3}>\n                    <Box>\n                      <Field\n                        name=\"email\"\n                        validate={validateEmail}\n                        width={'100%'}\n                      >\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={form.errors.email && form.touched.email}\n                          >\n                            <FormLabel htmlFor=\"email\">Email *</FormLabel>\n                            <Input\n                              {...field}\n                              id=\"email\"\n                              placeholder=\"Email\"\n                              value={values.email}\n                              onChange={handleChange}\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.email}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Box>\n                      <Field\n                        name=\"firstName\"\n                        validate={validateName}\n                        width={'100%'}\n                      >\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.firstName && form.touched.firstName\n                            }\n                          >\n                            <FormLabel htmlFor=\"firstName\">\n                              First name *\n                            </FormLabel>\n                            <Input\n                              {...field}\n                              id=\"firstName\"\n                              placeholder=\"Muhammad\"\n                              value={values.firstName}\n                              onChange={handleChange}\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.firstName}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Box>\n                      <Field\n                        name=\"lastName\"\n                        validate={validateName}\n                        width={'100%'}\n                      >\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.lastName && form.touched.lastName\n                            }\n                          >\n                            <FormLabel htmlFor=\"lastName\">\n                              Last name *\n                            </FormLabel>\n                            <Input\n                              {...field}\n                              id=\"lastName\"\n                              placeholder=\"Ahmad\"\n                              value={values.lastName}\n                              onChange={handleChange}\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.lastName}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Box>\n                      <Field\n                        name=\"password\"\n                        validate={validatePassword}\n                        width={'100%'}\n                      >\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.password && form.touched.password\n                            }\n                          >\n                            <FormLabel htmlFor=\"password\">Password *</FormLabel>\n                            <Input\n                              {...field}\n                              type=\"password\"\n                              id=\"password\"\n                              placeholder=\"******\"\n                              value={values.password}\n                              onChange={handleChange}\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.password}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n                    <Box>\n                      <Field\n                        name=\"passwordConfirmation\"\n                        validate={validatePassword}\n                        width={'100%'}\n                      >\n                        {({ field, form }) => (\n                          <FormControl\n                            isInvalid={\n                              form.errors.passwordConfirmation &&\n                              form.touched.passwordConfirmation\n                            }\n                          >\n                            <FormLabel htmlFor=\"passwordConfirmation\">\n                              Confirm password *\n                            </FormLabel>\n                            <Input\n                              {...field}\n                              type=\"password\"\n                              id=\"passwordConfirmation\"\n                              placeholder=\"******\"\n                              value={values.passwordConfirmation}\n                              onChange={handleChange}\n                            />\n                            <FormErrorMessage mt={0}>\n                              {form.errors.passwordConfirmation}\n                            </FormErrorMessage>\n                          </FormControl>\n                        )}\n                      </Field>\n                    </Box>\n\n                    <Stack spacing={10}>\n                      <Button\n                      isLoading={loading}\n                        bg={'blue.400'}\n                        color={'white'}\n                        _hover={{\n                          bg: 'blue.500',\n                        }}\n                        type=\"submit\"\n                      >\n                        Sign up\n                      </Button>\n                    </Stack>\n                  </Stack>\n                </form>\n              );\n            }}\n          </Formik>\n        </Box>\n        <Box px={8} minWidth={['16em', '25em']}>\n          <HStack justifyContent=\"center\">\n            <InternalLink text={'Login'} path={'/signin'} />\n          </HStack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n};\n\nSignup.propTypes = {\n  history: PropTypes.object,\n};\n\nexport default Signup;\n","import {\n  Container,\n  Stack,\n  Flex,\n  Box,\n  Heading,\n  Text,\n  Button,\n  Image,\n  Icon,\n  IconButton,\n  createIcon,\n  IconProps,\n  useColorModeValue,\n  UnorderedList,\n  ListItem\n} from '@chakra-ui/react';\nimport { Link } from 'react-router-dom';\n\nexport default function CallToActionWithVideo() {\n  return (\n    <Container maxW={'7xl'}>\n      <Stack\n        align={'center'}\n        spacing={{ base: 8, md: 10 }}\n        py={{ base: 20, md: 28 }}\n        direction={{ base: 'column', md: 'row' }}>\n        <Stack flex={1} spacing={{ base: 5, md: 10 }}>\n          <Heading\n            lineHeight={1.1}\n            fontWeight={600}\n            fontSize={{ base: '3xl', sm: '4xl', lg: '6xl' }}>\n            <Text\n              as={'span'}\n              position={'relative'}\n              _after={{\n                content: \"''\",\n                width: 'full',\n                height: '30%',\n                position: 'absolute',\n                bottom: 1,\n                left: 0,\n                bg: 'red.400',\n                zIndex: -1,\n              }}>\n              Quick Start\n            </Text>\n            <br />\n            <Text as={'span'} color={'red.400'}>\n              React + Rails\n            </Text>\n          </Heading>\n          <Flex justifyContent=\"center\" textAlign=\"left\">\n            <UnorderedList>\n              <ListItem>Uses React on Front-end.</ListItem>\n              <ListItem>Uses Context API for state management.</ListItem>\n              <ListItem>Uses Rails on Back-end.</ListItem>\n              <ListItem>Uses ChakraUI for UI.</ListItem>\n              <ListItem>Uses Devise for User authentication(token based).</ListItem>\n              <ListItem>Uses PostgreSQL database.</ListItem>\n            </UnorderedList>\n          </Flex>\n          <Stack\n            spacing={{ base: 4, sm: 6 }}\n            direction={{ base: 'column', sm: 'row' }}>\n            <Button\n              rounded={'full'}\n              size={'lg'}\n              fontWeight={'normal'}\n              px={6}\n              colorScheme={'red'}\n              bg={'red.400'}\n              _hover={{ bg: 'red.500' }}\n              as={Link}\n              to=\"/login\">\n              Sign in\n            </Button>\n            <Button\n              rounded={'full'}\n              size={'lg'}\n              fontWeight={'normal'}\n              px={6}\n              as={Link}\n              to=\"/signup\">\n              Sign up\n            </Button>\n          </Stack>\n        </Stack>\n        <Flex\n          flex={1}\n          justify={'center'}\n          align={'center'}\n          position={'relative'}\n          w={'full'}>\n          <Blob\n            w={'150%'}\n            h={'150%'}\n            position={'absolute'}\n            top={'-20%'}\n            left={0}\n            zIndex={-1}\n            color={useColorModeValue('red.50', 'red.400')}\n          />\n          <Box\n            position={'relative'}\n            height={'300px'}\n            rounded={'2xl'}\n            boxShadow={'2xl'}\n            width={'full'}\n            overflow={'hidden'}>\n            <IconButton\n              aria-label={'Play Button'}\n              variant={'ghost'}\n              _hover={{ bg: 'transparent' }}\n              icon={<PlayIcon w={12} h={12} />}\n              size={'lg'}\n              color={'white'}\n              position={'absolute'}\n              left={'50%'}\n              top={'50%'}\n              transform={'translateX(-50%) translateY(-50%)'}\n            />\n            <Image\n              alt={'Hero Image'}\n              fit={'cover'}\n              align={'center'}\n              w={'100%'}\n              h={'100%'}\n              src={\n                'https://images.unsplash.com/photo-1499951360447-b19be8fe80f5?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=800&q=80'\n              }\n            />\n          </Box>\n        </Flex>\n      </Stack>\n    </Container>\n  );\n}\n\nconst PlayIcon = createIcon({\n  displayName: 'PlayIcon',\n  viewBox: '0 0 58 58',\n  d:\n    'M28.9999 0.562988C13.3196 0.562988 0.562378 13.3202 0.562378 29.0005C0.562378 44.6808 13.3196 57.438 28.9999 57.438C44.6801 57.438 57.4374 44.6808 57.4374 29.0005C57.4374 13.3202 44.6801 0.562988 28.9999 0.562988ZM39.2223 30.272L23.5749 39.7247C23.3506 39.8591 23.0946 39.9314 22.8332 39.9342C22.5717 39.9369 22.3142 39.8701 22.0871 39.7406C21.86 39.611 21.6715 39.4234 21.5408 39.1969C21.4102 38.9705 21.3421 38.7133 21.3436 38.4519V19.5491C21.3421 19.2877 21.4102 19.0305 21.5408 18.8041C21.6715 18.5776 21.86 18.3899 22.0871 18.2604C22.3142 18.1308 22.5717 18.064 22.8332 18.0668C23.0946 18.0696 23.3506 18.1419 23.5749 18.2763L39.2223 27.729C39.4404 27.8619 39.6207 28.0486 39.7458 28.2713C39.8709 28.494 39.9366 28.7451 39.9366 29.0005C39.9366 29.2559 39.8709 29.507 39.7458 29.7297C39.6207 29.9523 39.4404 30.1391 39.2223 30.272Z',\n});\n\nexport const Blob = (props) => {\n  return (\n    <Icon\n      width={'100%'}\n      viewBox=\"0 0 578 440\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}>\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M239.184 439.443c-55.13-5.419-110.241-21.365-151.074-58.767C42.307 338.722-7.478 282.729.938 221.217c8.433-61.644 78.896-91.048 126.871-130.712 34.337-28.388 70.198-51.348 112.004-66.78C282.34 8.024 325.382-3.369 370.518.904c54.019 5.115 112.774 10.886 150.881 49.482 39.916 40.427 49.421 100.753 53.385 157.402 4.13 59.015 11.255 128.44-30.444 170.44-41.383 41.683-111.6 19.106-169.213 30.663-46.68 9.364-88.56 35.21-135.943 30.551z\"\n        fill=\"currentColor\"\n      />\n    </Icon>\n  );\n};","import React from \"react\";\nimport { Flex, Spinner } from \"@chakra-ui/react\";\nconst PageLoader = () => {\n  return (\n    <Flex\n      position=\"fixed\"\n      left={0}\n      right={0}\n      bottom={0}\n      top={0}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      bg=\"white\"\n      zIndex={999}\n    >\n      <Spinner thickness=\"4px\" color=\"gray.400\" />\n    </Flex>\n  );\n};\n\nexport default PageLoader;\n","import React, { useEffect, useState } from 'react';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { either, isEmpty, isNil } from 'ramda';\nimport { initializeLogger } from '../common/logger';\nimport Home from './Dashboard/index';\nimport PrivateRoute from './Common/PrivateRoute';\nimport PasswordReset from './Authentication/ResetPassword';\nimport Login from './Authentication/Login';\nimport Signup from './Authentication/Signup';\nimport Hero from './Home/Hero';\nimport { useAuthState, useAuthDispatch } from '../contexts/auth';\nimport { useUserDispatch } from '../contexts/user';\nimport { setAuthHeaders, registerIntercepts } from '../apis/axios';\nimport PageLoader from './Common/PageLoader';\n\nconst Main = props => {\n  const [loading, setLoading] = useState(true);\n  const { authToken } = useAuthState();\n  const userDispatch = useUserDispatch();\n  const authDispatch = useAuthDispatch();\n  const isLoggedIn = !either(isNil, isEmpty)(authToken);\n\n  useEffect(() => {\n    console.log(props)\n    if (props?.user)\n      userDispatch({ type: 'SET_USER', payload: { user: props.user } });\n    initializeLogger();\n    registerIntercepts(authDispatch);\n    setAuthHeaders(setLoading);\n  }, []);\n\n  if (loading) {\n    return <PageLoader />;\n  }\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/my/password/new\" component={PasswordReset} />\n        <Route exact path=\"/signup\" component={Signup} />\n        {!isLoggedIn && <Route exact path=\"/\" component={Hero} />}\n        <Route exact path=\"/login\" component={Login} />\n        <PrivateRoute\n          path=\"/\"\n          redirectRoute=\"/login\"\n          condition={isLoggedIn}\n          component={Home}\n        />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nMain.propTypes = {\n  user: PropTypes.object,\n};\n\nexport default Main;\n","export const initializeLogger = () => {\n  /* eslint no-undef: \"off\"*/\n  require(\"js-logger\").useDefaults();\n};\n","import React from 'react';\nimport { ChakraProvider, Box, Grid, theme } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport Main from './components/Main';\n\nimport { AuthProvider } from './contexts/auth';\nimport { UserProvider } from './contexts/user';\n\nfunction App(props) {\n  return (\n    <AuthProvider>\n      <UserProvider>\n        <ChakraProvider theme={theme}>\n          <Box textAlign=\"center\" fontSize=\"xl\">\n            {/* <Grid minH=\"100vh\" p={3}>\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n        </Grid> */}\n            <Main {...props} />\n          </Box>\n        </ChakraProvider>\n      </UserProvider>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}